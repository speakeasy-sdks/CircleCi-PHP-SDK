<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace CircleCi;

class Context 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Add or update an environment variable
     * 
     * Create or update an environment variable within a context. Returns information about the environment variable, not including its value.
     * 
     * @param \CircleCi\Models\Operations\AddEnvironmentVariableToContextRequest $request
     * @return \CircleCi\Models\Operations\AddEnvironmentVariableToContextResponse
     */
	public function addEnvironmentVariableToContext(
        \CircleCi\Models\Operations\AddEnvironmentVariableToContextRequest $request,
    ): \CircleCi\Models\Operations\AddEnvironmentVariableToContextResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/context/{context-id}/environment-variable/{env-var-name}', \CircleCi\Models\Operations\AddEnvironmentVariableToContextRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json;q=1, application/json;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \CircleCi\Models\Operations\AddEnvironmentVariableToContextResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addEnvironmentVariableToContext200ApplicationJSONAnyOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addEnvironmentVariableToContextDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\AddEnvironmentVariableToContextDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new context
     * 
     * @param \CircleCi\Models\Operations\CreateContextRequestBody $request
     * @return \CircleCi\Models\Operations\CreateContextResponse
     */
	public function createContext(
        \CircleCi\Models\Operations\CreateContextRequestBody $request,
    ): \CircleCi\Models\Operations\CreateContextResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/context');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json;q=1, application/json;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \CircleCi\Models\Operations\CreateContextResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->context = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\CreateContextContext', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createContextDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\CreateContextDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a context
     * 
     * @param \CircleCi\Models\Operations\DeleteContextRequest $request
     * @return \CircleCi\Models\Operations\DeleteContextResponse
     */
	public function deleteContext(
        \CircleCi\Models\Operations\DeleteContextRequest $request,
    ): \CircleCi\Models\Operations\DeleteContextResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/context/{context-id}', \CircleCi\Models\Operations\DeleteContextRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json;q=1, application/json;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \CircleCi\Models\Operations\DeleteContextResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\DeleteContextMessageResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteContextDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\DeleteContextDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove an environment variable
     * 
     * Delete an environment variable from a context.
     * 
     * @param \CircleCi\Models\Operations\DeleteEnvironmentVariableFromContextRequest $request
     * @return \CircleCi\Models\Operations\DeleteEnvironmentVariableFromContextResponse
     */
	public function deleteEnvironmentVariableFromContext(
        \CircleCi\Models\Operations\DeleteEnvironmentVariableFromContextRequest $request,
    ): \CircleCi\Models\Operations\DeleteEnvironmentVariableFromContextResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/context/{context-id}/environment-variable/{env-var-name}', \CircleCi\Models\Operations\DeleteEnvironmentVariableFromContextRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json;q=1, application/json;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \CircleCi\Models\Operations\DeleteEnvironmentVariableFromContextResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\DeleteEnvironmentVariableFromContextMessageResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteEnvironmentVariableFromContextDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\DeleteEnvironmentVariableFromContextDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a context
     * 
     * Returns basic information about a context.
     * 
     * @param \CircleCi\Models\Operations\GetContextRequest $request
     * @return \CircleCi\Models\Operations\GetContextResponse
     */
	public function getContext(
        \CircleCi\Models\Operations\GetContextRequest $request,
    ): \CircleCi\Models\Operations\GetContextResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/context/{context-id}', \CircleCi\Models\Operations\GetContextRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json;q=1, application/json;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \CircleCi\Models\Operations\GetContextResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->context = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\GetContextContext', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getContextDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\GetContextDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List contexts
     * 
     * List all contexts for an owner.
     * 
     * @param \CircleCi\Models\Operations\ListContextsRequest $request
     * @return \CircleCi\Models\Operations\ListContextsResponse
     */
	public function listContexts(
        \CircleCi\Models\Operations\ListContextsRequest $request,
    ): \CircleCi\Models\Operations\ListContextsResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/context');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\CircleCi\Models\Operations\ListContextsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json;q=1, application/json;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \CircleCi\Models\Operations\ListContextsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listContexts200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\ListContexts200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listContextsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\ListContextsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List environment variables
     * 
     * List information about environment variables in a context, not including their values.
     * 
     * @param \CircleCi\Models\Operations\ListEnvironmentVariablesFromContextRequest $request
     * @return \CircleCi\Models\Operations\ListEnvironmentVariablesFromContextResponse
     */
	public function listEnvironmentVariablesFromContext(
        \CircleCi\Models\Operations\ListEnvironmentVariablesFromContextRequest $request,
    ): \CircleCi\Models\Operations\ListEnvironmentVariablesFromContextResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/context/{context-id}/environment-variable', \CircleCi\Models\Operations\ListEnvironmentVariablesFromContextRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\CircleCi\Models\Operations\ListEnvironmentVariablesFromContextRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json;q=1, application/json;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \CircleCi\Models\Operations\ListEnvironmentVariablesFromContextResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEnvironmentVariablesFromContext200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\ListEnvironmentVariablesFromContext200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEnvironmentVariablesFromContextDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\ListEnvironmentVariablesFromContextDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
}