<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace CircleCi;

class Pipeline 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Continue a pipeline
     * 
     * Continue a pipeline from the setup phase.
     * 
     * @param \CircleCi\Models\Operations\ContinuePipelineRequestBody $request
     * @return \CircleCi\Models\Operations\ContinuePipelineResponse
     */
	public function continuePipeline(
        \CircleCi\Models\Operations\ContinuePipelineRequestBody $request,
    ): \CircleCi\Models\Operations\ContinuePipelineResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/pipeline/continue');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json;q=1, application/json;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \CircleCi\Models\Operations\ContinuePipelineResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\ContinuePipelineMessageResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->continuePipelineDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\ContinuePipelineDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a pipeline by ID
     * 
     * Returns a pipeline by the pipeline ID.
     * 
     * @param \CircleCi\Models\Operations\GetPipelineByIdRequest $request
     * @return \CircleCi\Models\Operations\GetPipelineByIdResponse
     */
	public function getPipelineById(
        \CircleCi\Models\Operations\GetPipelineByIdRequest $request,
    ): \CircleCi\Models\Operations\GetPipelineByIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/pipeline/{pipeline-id}', \CircleCi\Models\Operations\GetPipelineByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json;q=1, application/json;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \CircleCi\Models\Operations\GetPipelineByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pipeline = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\GetPipelineByIdPipeline', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPipelineByIdDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\GetPipelineByIdDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a pipeline by pipeline number
     * 
     * Returns a pipeline by the pipeline number.
     * 
     * @param \CircleCi\Models\Operations\GetPipelineByNumberRequest $request
     * @return \CircleCi\Models\Operations\GetPipelineByNumberResponse
     */
	public function getPipelineByNumber(
        \CircleCi\Models\Operations\GetPipelineByNumberRequest $request,
    ): \CircleCi\Models\Operations\GetPipelineByNumberResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/project/{project-slug}/pipeline/{pipeline-number}', \CircleCi\Models\Operations\GetPipelineByNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json;q=1, application/json;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \CircleCi\Models\Operations\GetPipelineByNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pipeline = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\GetPipelineByNumberPipeline', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPipelineByNumberDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\GetPipelineByNumberDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a pipeline's configuration
     * 
     * Returns a pipeline's configuration by ID.
     * 
     * @param \CircleCi\Models\Operations\GetPipelineConfigByIdRequest $request
     * @return \CircleCi\Models\Operations\GetPipelineConfigByIdResponse
     */
	public function getPipelineConfigById(
        \CircleCi\Models\Operations\GetPipelineConfigByIdRequest $request,
    ): \CircleCi\Models\Operations\GetPipelineConfigByIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/pipeline/{pipeline-id}/config', \CircleCi\Models\Operations\GetPipelineConfigByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json;q=1, application/json;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \CircleCi\Models\Operations\GetPipelineConfigByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pipelineConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\GetPipelineConfigByIdPipelineConfig', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPipelineConfigByIdDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\GetPipelineConfigByIdDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get your pipelines
     * 
     * Returns a sequence of all pipelines for this project triggered by the user.
     * 
     * @param \CircleCi\Models\Operations\ListMyPipelinesRequest $request
     * @return \CircleCi\Models\Operations\ListMyPipelinesResponse
     */
	public function listMyPipelines(
        \CircleCi\Models\Operations\ListMyPipelinesRequest $request,
    ): \CircleCi\Models\Operations\ListMyPipelinesResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/project/{project-slug}/pipeline/mine', \CircleCi\Models\Operations\ListMyPipelinesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\CircleCi\Models\Operations\ListMyPipelinesRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json;q=1, application/json;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \CircleCi\Models\Operations\ListMyPipelinesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pipelineListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\ListMyPipelinesPipelineListResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMyPipelinesDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\ListMyPipelinesDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of pipelines
     * 
     * Returns all pipelines for the most recently built projects (max 250) you follow in an organization.
     * 
     * @param \CircleCi\Models\Operations\ListPipelinesRequest $request
     * @return \CircleCi\Models\Operations\ListPipelinesResponse
     */
	public function listPipelines(
        \CircleCi\Models\Operations\ListPipelinesRequest $request,
    ): \CircleCi\Models\Operations\ListPipelinesResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/pipeline');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\CircleCi\Models\Operations\ListPipelinesRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json;q=1, application/json;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \CircleCi\Models\Operations\ListPipelinesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pipelineListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\ListPipelinesPipelineListResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPipelinesDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\ListPipelinesDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all pipelines
     * 
     * Returns all pipelines for this project.
     * 
     * @param \CircleCi\Models\Operations\ListPipelinesForProjectRequest $request
     * @return \CircleCi\Models\Operations\ListPipelinesForProjectResponse
     */
	public function listPipelinesForProject(
        \CircleCi\Models\Operations\ListPipelinesForProjectRequest $request,
    ): \CircleCi\Models\Operations\ListPipelinesForProjectResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/project/{project-slug}/pipeline', \CircleCi\Models\Operations\ListPipelinesForProjectRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\CircleCi\Models\Operations\ListPipelinesForProjectRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json;q=1, application/json;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \CircleCi\Models\Operations\ListPipelinesForProjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pipelineListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\ListPipelinesForProjectPipelineListResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPipelinesForProjectDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\ListPipelinesForProjectDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a pipeline's workflows
     * 
     * Returns a paginated list of workflows by pipeline ID.
     * 
     * @param \CircleCi\Models\Operations\ListWorkflowsByPipelineIdRequest $request
     * @return \CircleCi\Models\Operations\ListWorkflowsByPipelineIdResponse
     */
	public function listWorkflowsByPipelineId(
        \CircleCi\Models\Operations\ListWorkflowsByPipelineIdRequest $request,
    ): \CircleCi\Models\Operations\ListWorkflowsByPipelineIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/pipeline/{pipeline-id}/workflow', \CircleCi\Models\Operations\ListWorkflowsByPipelineIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\CircleCi\Models\Operations\ListWorkflowsByPipelineIdRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json;q=1, application/json;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \CircleCi\Models\Operations\ListWorkflowsByPipelineIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->workflowListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\ListWorkflowsByPipelineIdWorkflowListResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listWorkflowsByPipelineIdDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\ListWorkflowsByPipelineIdDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Trigger a new pipeline
     * 
     * Triggers a new pipeline on the project.
     * 
     * @param \CircleCi\Models\Operations\TriggerPipelineRequest $request
     * @return \CircleCi\Models\Operations\TriggerPipelineResponse
     */
	public function triggerPipeline(
        \CircleCi\Models\Operations\TriggerPipelineRequest $request,
    ): \CircleCi\Models\Operations\TriggerPipelineResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/project/{project-slug}/pipeline', \CircleCi\Models\Operations\TriggerPipelineRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json;q=1, application/json;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \CircleCi\Models\Operations\TriggerPipelineResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pipelineCreation = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\TriggerPipelinePipelineCreation', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->triggerPipelineDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'CircleCi\Models\Operations\TriggerPipelineDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
}